<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="movies" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>movies.txt;System.String, mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e;windows-1250</value>
  </data>
  <data name="m_about" xml:space="preserve">
    <value>About Us</value>
  </data>
  <data name="m_conflicts" xml:space="preserve">
    <value>Conflicts</value>
  </data>
  <data name="m_files" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="m_permisions" xml:space="preserve">
    <value>Permissions</value>
  </data>
  <data name="m_push" xml:space="preserve">
    <value>Push Notifications</value>
  </data>
  <data name="m_relations" xml:space="preserve">
    <value>Relation Conflicts</value>
  </data>
  <data name="m_sync" xml:space="preserve">
    <value>Simple Sync</value>
  </data>
  <data name="m_whatNext" xml:space="preserve">
    <value>What to do next?</value>
  </data>
  <data name="dialogInfoAddText" xml:space="preserve">
    <value>Add new elements</value>
  </data>
  <data name="dialogInfoChengeUserText" xml:space="preserve">
    <value>Now switch user or connect another device</value>
  </data>
  <data name="dialogInfoSyncText1" xml:space="preserve">
    <value>Synchronize added elements with the cloud</value>
  </data>
  <data name="dialogInfoSyncText2" xml:space="preserve">
    <value>Sync to see new elements</value>
  </data>
  <data name="dialogInfoSyncText3" xml:space="preserve">
    <value>Add, sync, switch user, sync…</value>
  </data>
  <data name="dialogInfoSyncText4" xml:space="preserve">
    <value>But do not sync data yet!</value>
  </data>
  <data name="dialogSimpleSyncText1" xml:space="preserve">
    <value>Exchange simple data between users.</value>
  </data>
  <data name="dialogSimpleSyncText2" xml:space="preserve">
    <value>Now it's your turn! Try to add more records and exchange them between as many devices and users as you can find…</value>
  </data>
  <data name="dialogSimpleSyncTitle" xml:space="preserve">
    <value>Simple way to share data…</value>
  </data>
  <data name="dialogConflictsSyncText1" xml:space="preserve">
    <value>Two users modify one record at the same time? You can easily cope with that!</value>
  </data>
  <data name="dialogConflictsSyncText2" xml:space="preserve">
    <value>Choose one movie title that all users have. Now change movie rating and synchronize updated data…</value>
  </data>
  <data name="dialogConflictsSyncText3" xml:space="preserve">
    <value>Modify the same record with another user and then synchronize…</value>
  </data>
  <data name="dialogConflictsSyncText4" xml:space="preserve">
    <value>And… don't worry anymore. No data is lost! Your record is in conflict state, but it's easy to resolve it - although not in this demo…</value>
  </data>
  <data name="dialogConflictsSyncTitle" xml:space="preserve">
    <value>Warning, conflicts arise…</value>
  </data>
  <data name="dialogFilesSyncAddText" xml:space="preserve">
    <value>Add new images   </value>
  </data>
  <data name="dialogFilesSyncText1" xml:space="preserve">
    <value>Find out how easy data exchange can be!</value>
  </data>
  <data name="dialogFilesSyncTitle" xml:space="preserve">
    <value>Also simple way to share binaries…</value>
  </data>
  <data name="dialogPermissionsSyncText1" xml:space="preserve">
    <value>In your app you can easily define who will see what.</value>
  </data>
  <data name="dialogPermissionsSyncText2" xml:space="preserve">
    <value>See difference? That's right! Some data are accesible only to creator, some to everyone. But you can do so much more…</value>
  </data>
  <data name="dialogPermissionsSyncTitle" xml:space="preserve">
    <value>Protect your shared data…</value>
  </data>
  <data name="dialogPushNotificationsText1" xml:space="preserve">
    <value>You can simply send push notifications without thinking about operating systems and devices.</value>
  </data>
  <data name="dialogPushNotificationsText2" xml:space="preserve">
    <value>Also you can specify receiver of your notification. He will get it - on every device he's logged in (even if application is turned off).</value>
  </data>
  <data name="dialogPushNotificationsTitle" xml:space="preserve">
    <value>Notify users with minimum effort…</value>
  </data>
  <data name="dialogRelationConflictsSyncText1" xml:space="preserve">
    <value>See how users can interfere with each other working on common Orders.</value>
  </data>
  <data name="dialogRelationConflictsSyncText2" xml:space="preserve">
    <value>As in previous example - choose one order and change it's status, synchronize data…</value>
  </data>
  <data name="dialogRelationConflictsSyncText3" xml:space="preserve">
    <value>Now using another user add or remove position in previously choosen order. Synchronize data.</value>
  </data>
  <data name="dialogRelationConflictsSyncText4" xml:space="preserve">
    <value>Don't be afraid. Your orders are secure. Conflicts can also occour in more complicated structures - like orders and positions. Of course you can feel safe, we will handle them for you…</value>
  </data>
  <data name="dialogRelationConflictsSyncTitle" xml:space="preserve">
    <value>Relations, conflicts - no problem at all…</value>
  </data>
  <data name="footerWarning" xml:space="preserve">
    <value>Items marked with     were not synchronized, because other user edited them at the same time.</value>
  </data>
  <data name="gettingStartedLink" xml:space="preserve">
    <value>http://mobeelizer.com/</value>
  </data>
  <data name="gettingStartedLinkText" xml:space="preserve">
    <value>Visit</value>
  </data>
  <data name="gettingStartedLinkText1" xml:space="preserve">
    <value>mobeelizer.com</value>
  </data>
  <data name="gettingStartedLinkText2" xml:space="preserve">
    <value>for more info.</value>
  </data>
  <data name="gettingStartedText" xml:space="preserve">
    <value>Mobeelizer is a Synchronization-as-a-Service for mobile developers. We strive to make it ridiculously easy to get synchronization for mobile apps up and running, so you can focus on creating mobile apps, without worrying about data exchange.</value>
  </data>
  <data name="gettingStartedText1" xml:space="preserve">
    <value>When using Mobeelizer, we automatically take care about the backend, configuration and complicated aspect of synchronization conflicts.</value>
  </data>
  <data name="gettingStartedText3" xml:space="preserve">
    <value>This app contains examples of using mobeelizer in different scenarios. You can see how to sync data, binary files or how to handle conflicts. It's only a small possibilities what mobeelizer can do for you. So have fun!</value>
  </data>
  <data name="graphsDetailsNew" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="graphsDetailsPending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="graphsDetailsReady" xml:space="preserve">
    <value>Ready to ship</value>
  </data>
  <data name="graphsDetailsReceived" xml:space="preserve">
    <value>Received</value>
  </data>
  <data name="graphsDetailsShipped" xml:space="preserve">
    <value>Shipped</value>
  </data>
  <data name="whatNextText" xml:space="preserve">
    <value>So you've seen how revolutionary mobeelizer is and what Synchronization-as-a-Service means for your app.</value>
  </data>
  <data name="whatNextText1" xml:space="preserve">
    <value>Now it's time for you to code&amp;play with mobeelizer by yourself.</value>
  </data>
  <data name="connectButton" xml:space="preserve">
    <value>Join</value>
  </data>
  <data name="connectingProgressMessage" xml:space="preserve">
    <value>Joining session</value>
  </data>
  <data name="createButton" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="createDemoSessionInfo" xml:space="preserve">
    <value>Create a new demo session:</value>
  </data>
  <data name="createDemoSessionInfo2" xml:space="preserve">
    <value>or connect to an existing one</value>
  </data>
  <data name="sessionInfo" xml:space="preserve">
    <value>To connect other device to this session insert code: </value>
  </data>
  <data name="sessionInfo2" xml:space="preserve">
    <value>on startup screen.</value>
  </data>
  <data name="sessionInfo3" xml:space="preserve">
    <value>Remember that on each connected device you can be logged as one of two users. To switch user simply press one of two user buttons placed on top of the screen.</value>
  </data>
</root>